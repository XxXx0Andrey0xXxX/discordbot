"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIError = exports.DankMemerAPI = void 0;
const APIError_1 = __importDefault(require("./APIError"));
exports.APIError = APIError_1.default;
const pkg = __importStar(require("../package.json"));
const file_type_1 = __importDefault(require("file-type"));
const node_fetch_1 = __importDefault(require("node-fetch"));
class DankMemerAPI {
    apiKey;
    userAgent;
    cacheRequests;
    timeout;
    constructor(d) {
        if (!d || !d.apiKey)
            throw new TypeError("missing api key");
        this.apiKey = d.apiKey;
        this.userAgent = d.userAgent || `DankMemerAPI/${pkg.version} (https://github.com/FurryBotCo/DankMemerAPI)`;
        this.cacheRequests = !!d.cacheRequests;
        this.timeout = !d.timeout ? 3e4 : d.timeout;
    }
    async request(path, avatars = [], usernames = [], text = "", extra = {}) {
        if (!Array.isArray(avatars))
            avatars = [avatars];
        if (!Array.isArray(usernames))
            usernames = [usernames];
        const data = {
            ...extra
        };
        if (avatars && avatars.length > 0)
            data.avatars = avatars;
        if (usernames && usernames.length > 0)
            data.usernames = usernames;
        if (text && text.length > 0)
            data.text = text;
        const r = await (0, node_fetch_1.default)(`https://dankmemer.services/api/${path}`, {
            method: path === "yomomma" ? "GET" : "POST",
            headers: {
                "Authorization": this.apiKey,
                "User-Agent": this.userAgent,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });
        // it returns a buffer but says it returns a string for some reason??
        const b = await r.buffer();
        if (r.status !== 200) {
            let j;
            try {
                j = JSON.parse(b.toString());
            }
            catch (e) {
                j = b.toString();
            }
            throw new APIError_1.default(r.status, r.statusText, j);
        }
        const type = await file_type_1.default.fromBuffer(b).catch(() => ({
            ext: null,
            mime: null
        }));
        return {
            ext: type.ext,
            mime: type.mime,
            file: b
        };
    }
    // I could have made this getters, but I believe separate
    // functions will be easier
    async abandon(text) { return this.request("abandon", [], [], text); }
    async aborted(avatar) { return this.request("aborted", [avatar], [], ""); }
    async affect(avatar) { return this.request("affect", [avatar], [], ""); }
    async airpods(avatar) { return this.request("airpods", [avatar], [], ""); }
    async america(avatar) { return this.request("america", [avatar], [], ""); }
    async armor(text) { return this.request("armor", [], [], text); }
    async balloon(text) { return this.request("balloon", [], [], text); }
    async bed(avatars) { return this.request("bed", avatars, [], ""); }
    async bongocat(avatar) { return this.request("bongocat", [avatar], [], ""); }
    async boo(text) { return this.request("boo", [], [], text); }
    async brain(text) { return this.request("brain", [], [], text); }
    async brazzers(avatar) { return this.request("brazzers", [avatar], [], ""); }
    async byemom(avatar, username, text) { return this.request("byemom", [avatar], [username], text); }
    async cancer(avatar) { return this.request("cancer", [avatar], [], ""); }
    async changemymind(text) { return this.request("changemymind", [], [], text); }
    async cheating(text) { return this.request("cheating", [], [], text); }
    async citation(text) { return this.request("citation", [], [], text); }
    async communism(avatar) { return this.request("communism", [avatar], [], ""); }
    async confusedcat(text) { return this.request("confusedcat", [], [], text); }
    async corporate(avatars) { return this.request("corporate", Array.isArray(avatars) ? avatars : [avatars], [], ""); }
    async crab(text) { return this.request("crab", [], [], text); }
    async cry(text) { return this.request("cry", [], [], text); }
    async dab(avatar) { return this.request("dab", [avatar], [], ""); }
    async dank(avatar) { return this.request("dank", [avatar], [], ""); }
    async deepfry(avatar) { return this.request("deepfry", [avatar], [], ""); }
    async delete(avatar) { return this.request("delete", [avatar], [], ""); }
    async disability(avatar) { return this.request("disability", [avatar], [], ""); }
    async doglemon(text) { return this.request("doglemon", [], [], text); }
    async door(avatar) { return this.request("door", [avatar], [], ""); }
    async egg(avatar) { return this.request("egg", [avatar], [], ""); }
    async excuseme(text) { return this.request("excuseme", [], [], text); }
    async expanddong(text) { return this.request("expanddong", [], [], text); }
    async expandingwwe(text) { return this.request("expandingwwe", [], [], text); }
    async facts(text) { return this.request("facts", [], [], text); }
    async failure(avatar) { return this.request("failure", [avatar], [], ""); }
    async fakenews(avatar) { return this.request("fakenews", [avatar], [], ""); }
    async farmer(text) { return this.request("farmer", [], [], text); }
    async fedora(avatar) { return this.request("fedora", [avatar], [], ""); }
    async floor(avatar, text) { return this.request("floor", [avatar], [], text); }
    async fuck(text) { return this.request("fuck", [], [], text); }
    async garfield(avatar, text) { return this.request("garfield", [avatar], [], text); }
    async gay(avatar) { return this.request("gay", [avatar], [], ""); }
    async godwhy(text) { return this.request("godwhy", [], [], text); }
    async goggles(avatar) { return this.request("goggles", [avatar], [], ""); }
    async hitler(avatar) { return this.request("hitler", [avatar], [], ""); }
    async humansgood(text) { return this.request("humansgood", [], [], text); }
    async inator(text) { return this.request("inator", [], [], text); }
    async invert(avatar) { return this.request("invert", [avatar], [], ""); }
    async ipad(avatar) { return this.request("ipad", [avatar], [], ""); }
    async jail(avatar) { return this.request("jail", [avatar], [], ""); }
    async justpretending(text) { return this.request("justpretending", [], [], text); }
    async keepurdistance(text) { return this.request("keepurdistance", [], [], text); }
    async kimborder(avatar) { return this.request("kimborder", [avatar], [], ""); }
    async knowyourlocation(text) { return this.request("knowyourlocation", [], [], text); }
    async kowalski(text) { return this.request("kowalski", [], [], text); }
    async laid(avatar) { return this.request("laid", [avatar], [], ""); }
    async letmein(text) { return this.request("letmein", [], [], text); }
    async lick(text) { return this.request("lick", [], [], text); }
    async madethis(avatars) { return this.request("madethis", avatars, [], ""); }
    async magik(avatar) { return this.request("magik", [avatar], [], ""); }
    async master(text) { return this.request("master", [], [], text); }
    async meme(avatar, extra) { return this.request("meme", [avatar], [], "", extra); }
    async note(text) { return this.request("note", [], [], text); }
    async nothing(text) { return this.request("nothing", [], [], text); }
    async obama(text) { return this.request("obama", [], [], text); }
    async ohno(text) { return this.request("ohno", [], [], text); }
    async piccolo(text) { return this.request("piccolo", [], [], text); }
    async plan(text) { return this.request("plan", [], [], text); }
    async presentation(text) { return this.request("presentation", [], [], text); }
    async quote(avatar, username, text) { return this.request("quote", [avatar], [username], text); }
    async radialblur(avatar) { return this.request("radialblur", [avatar], [], ""); }
    async rip(avatar) { return this.request("rip", [avatar], [], ""); }
    async roblox(avatar) { return this.request("roblox", [avatar], [], ""); }
    async salty(avatar) { return this.request("salty", [avatar], [], ""); }
    async satan(avatar) { return this.request("satan", [avatar], [], ""); }
    async savehumanity(text) { return this.request("savehumanity", [], [], text); }
    async screams(avatars) { return this.request("screams", avatars, [], ""); }
    async shit(text) { return this.request("shit", [], [], text); }
    async sickban(avatar) { return this.request("sickban", [avatar], [], ""); }
    async slap(avatars) { return this.request("slap", avatars, [], ""); }
    async slapsroof(text) { return this.request("slapsroof", [], [], text); }
    async sneakyfox(text) { return this.request("sneakyfox", [], [], text); }
    async spank(avatars) { return this.request("spank", avatars, [], ""); }
    async stroke(text) { return this.request("stroke", [], [], text); }
    async surprised(text) { return this.request("surprised", [], [], text); }
    async sword(username, text) { return this.request("sword", [], [username], text); }
    // theoffice
    async thesearch(text) { return this.request("thesearch", [], [], text); }
    async trash(avatar) { return this.request("trash", [avatar], [], ""); }
    async trigger(avatar) { return this.request("trigger", [avatar], [], ""); }
    async tweet(avatar, usernames, text, extra) { return this.request("tweet", [avatar], usernames, text, extra); }
    async ugly(avatar) { return this.request("ugly", [avatar], [], ""); }
    async unpopular(avatar, text) { return this.request("unpopular", [avatar], [], text); }
    async violence(text) { return this.request("violence", [], [], text); }
    async violentsparks(text) { return this.request("violentsparks", [], [], text); }
    async vr(text) { return this.request("vr", [], [], text); }
    async walking(text) { return this.request("walking", [], [], text); }
    async wanted(avatar) { return this.request("wanted", [avatar], [], ""); }
    async warp(avatar) { return this.request("warp", [avatar], [], ""); }
    async whodidthis(avatar) { return this.request("whodidthis", [avatar], []); }
    async whothisis(avatar, text) { return this.request("whothisis", [avatar], [], text); }
    async yomomma() { return this.request("yomomma", [], [], ""); }
    async youtube(avatar, username, text) { return this.request("youtube", [avatar], [username], text); }
}
exports.DankMemerAPI = DankMemerAPI;
exports.default = DankMemerAPI;
//# sourceMappingURL=data:application/json;base64,